/* Process.jsx */
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import './process.css';

const Process  = () => {
  const { state } = useLocation();
  const navigate = useNavigate();

  const initialLabResult = state?.labResult || localStorage.getItem('lastLabResult') || '';
  const initialFilePath = state?.filePath || localStorage.getItem('lastFilePath') || '';

  const [editedResult, setEditedResult] = useState(initialLabResult);
  const [message, setMessage] = useState('');
  const [resultId, setResultId] = useState(null);

  useEffect(() => {
    const fetchSavedResult = async () => {
      if (!initialFilePath) return;

      const token = localStorage.getItem('token');
      if (!token) {
        setMessage('‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç.');
        navigate('/login');
        return;
      }

      try {
        const response = await fetch(`http://localhost:5001/api/get-result?filePath=${encodeURIComponent(initialFilePath)}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        const data = await response.json();
        if (response.ok && data.labResult) {
          setEditedResult(data.labResult);
          setResultId(data.id);
          setMessage(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (ID: ${data.id})`);
        } else {
          setMessage('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        }
      } catch (error) {
        setMessage('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ' + error.message);
      }
    };

    fetchSavedResult();
  }, [initialFilePath, navigate]);

  const handleChange = (e) => {
    const text = e.target.value;
    if (text.length > 10000) {
      setMessage('‚ö†Ô∏è –¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å–∏–º—É–º 10000 —Å–∏–º–≤–æ–ª—ñ–≤).');
      return;
    }
    setEditedResult(text);
    setMessage('');
  };

  const handleSave = async () => {
    const token = localStorage.getItem('token');
    if (!token) {
      setMessage('‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç.');
      navigate('/login');
      return;
    }

    try {
      const response = await fetch('http://localhost:5001/api/save-result', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ labResult: editedResult, filePath: initialFilePath }),
      });
      const result = await response.json();
      if (response.ok) {
        setResultId(result.id);
        setMessage(`‚úÖ –ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! ID: ${result.id}`);
      } else {
        setMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: ' + result.message);
      }
    } catch (error) {
      setMessage('üö´ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ' + error.message);
    }
  };

  const handleExport = () => {
    const blob = new Blob([editedResult], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'lab_result.txt';
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const displayResultId = resultId ? `–¢–µ–∫—É—â–∏–π ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: ${resultId}` : '';

  if (!initialLabResult && !initialFilePath) {
    return (
      <div className="process-wrapper">
        <div className="process-box">
          <h2>–û–±—Ä–æ–±–∫–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó —Ä–æ–±–æ—Ç–∏</h2>
          <p className="process-message">‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ PDF –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="process-wrapper">
      <div className="process-box">
        <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó —Ä–æ–±–æ—Ç–∏</h2>

        <div className="task-result">
          <p><strong>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª:</strong> <a href={initialFilePath} target="_blank" rel="noopener noreferrer">{initialFilePath}</a></p>
          <p>{displayResultId}</p>
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ AI:</h3>
          <textarea
            value={editedResult}
            onChange={handleChange}
            rows={15}
            placeholder="–†–µ–∑—É–ª—å—Ç–∞—Ç –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏..."
          />
          <div className="button-group">
            <button onClick={handleSave}>üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏</button>
            <button onClick={handleExport}>üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —è–∫ TXT</button>
            <button onClick={() => navigate('/upload')}>‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</button>
          </div>
        </div>

        {message && <p className="process-message">{message}</p>}
      </div>
    </div>
  );
};

export default Process;